{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\jbram\\\\Desktop\\\\clicky-game\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\jbram\\\\Desktop\\\\clicky-game\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\jbram\\\\Desktop\\\\clicky-game\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\jbram\\\\Desktop\\\\clicky-game\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\jbram\\\\Desktop\\\\clicky-game\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\jbram\\\\Desktop\\\\clicky-game\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport Card from \"./components/Card\";\nimport Wrapper from \"./components/Wrapper\";\nimport Navbar from \"./components/Navbar\";\nimport cards from \"./cards.json\";\nimport \"./App.css\";\n\nfunction shuffleCards(arr) {\n  for (var i = arr.length - 1; i > 0; i--) {\n    var j = Math.floor(Math.random() * (i + 1));\n    var _ref = [arr[j], arr[i]];\n    arr[i] = _ref[0];\n    arr[j] = _ref[1];\n  }\n}\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      cards: cards,\n      currentscore: 0,\n      highscore: 0,\n      clicked: [],\n      winState: ''\n    };\n\n    _this.handleClick = function (id) {\n      if (_this.state.clicked.indexOf(id) === -1) {\n        _this.handleIncrement();\n\n        _this.setState({\n          clicked: _this.state.clicked.concat(id)\n        });\n      } else {\n        _this.handleReset();\n      }\n    };\n\n    _this.handleIncrement = function () {\n      var newScore = _this.state.currentScore + 1;\n\n      _this.setState({\n        currentScore: newScore,\n        winState: ''\n      });\n\n      if (newScore >= _this.state.highScore) {\n        _this.setState({\n          highScore: newScore\n        });\n      } else if (newScore === 12) {\n        _this.setState({\n          winState: \"You won!\"\n        });\n      }\n\n      _this.handleShuffle();\n    };\n\n    _this.handleReset = function () {\n      _this.setState({\n        currentScore: 0,\n        highScore: _this.state.highscore,\n        winState: '',\n        clicked: []\n      });\n\n      _this.handleShuffle();\n    };\n\n    _this.handleShuffle = function () {\n      var shuffledCards = shuffleCards(cards);\n\n      _this.setState({\n        cards: shuffledCards\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    // gameOver = () => {\n    //   if (this.state.score > this.state.highScore) {\n    //     this.setState({highscore: this.state.score}, function() {\n    //       console.log(this.state.highscore);\n    //     });\n    //   }\n    //   this.state.cards.forEach(card => {\n    //     card.count = 0;\n    //   });\n    //   alert(`Game Over : ( \\nscore: ${this.state.score})`);\n    //   this.setState({score: 0});\n    //   return true;\n    // }\n    // clickCount = id => {\n    //   this.state.cards.find((o, i) => {\n    //     if (o.id === id) {\n    //       if (cards[i].count === 0) {\n    //         cards[i].count = cards[i].count + 1;\n    //         this.setState({score : this.state.score + 1}, function() {\n    //           console.log(this.state.score);\n    //         });\n    //         this.state.cards.sort(() => Math.random() - 0.5)\n    //         return true;\n    //       } else {\n    //         this.gameOver();\n    //       }\n    //     }\n    //   });\n    // }\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(Wrapper, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, React.createElement(Navbar, {\n        score: this.state.score,\n        highscore: this.state.highscore,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }), this.state.cards.map(function (card) {\n        return React.createElement(Card, {\n          handleClick: _this2.handleClick,\n          id: card.id,\n          key: card.id,\n          image: card.image,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 103\n          },\n          __self: this\n        });\n      }));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["C:\\Users\\jbram\\Desktop\\clicky-game\\src\\App.js"],"names":["React","Component","Card","Wrapper","Navbar","cards","shuffleCards","arr","i","length","j","Math","floor","random","App","state","currentscore","highscore","clicked","winState","handleClick","id","indexOf","handleIncrement","setState","concat","handleReset","newScore","currentScore","highScore","handleShuffle","shuffledCards","score","map","card","image"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Card from \"./components/Card\";\nimport Wrapper from \"./components/Wrapper\";\nimport Navbar from \"./components/Navbar\";\nimport cards from \"./cards.json\";\nimport \"./App.css\";\n\nfunction shuffleCards(arr) {\n  for (let i = arr.length -1; i> 0; i--) {\n    let j = Math.floor(Math.random() * (i + 1));\n    [arr[i], arr[j]] = [arr[j], arr[i]];\n  }\n}\n\n\nclass App extends Component {\n\n  state = {\n    cards,\n    currentscore: 0,\n    highscore: 0,\n    clicked: [],\n    winState: ''\n  };\n\n  handleClick = id => {\n    if (this.state.clicked.indexOf(id) === -1) {\n      this.handleIncrement();\n      this.setState({ clicked: this.state.clicked.concat(id) });\n    } else {\n      this.handleReset();\n    }\n  };\n\n  handleIncrement = () => {\n    const newScore = this.state.currentScore +1;\n    this.setState({\n      currentScore: newScore,\n      winState: ''\n    });\n    if(newScore >= this.state.highScore) {\n      this.setState({ highScore: newScore });\n    }\n    else if (newScore === 12) {\n      this.setState({ winState: \"You won!\" });\n    }\n    this.handleShuffle();\n  };\n\n  handleReset = () => {\n    this.setState({\n      currentScore: 0,\n      highScore: this.state.highscore,\n      winState: '',\n      clicked: []\n    });\n    this.handleShuffle();\n  }\n\n  handleShuffle = () => {\n    let shuffledCards = shuffleCards(cards);\n    this.setState({ cards: shuffledCards });\n  };\n\n  // gameOver = () => {\n  //   if (this.state.score > this.state.highScore) {\n  //     this.setState({highscore: this.state.score}, function() {\n  //       console.log(this.state.highscore);\n  //     });\n  //   }\n  //   this.state.cards.forEach(card => {\n  //     card.count = 0;\n  //   });\n\n  //   alert(`Game Over : ( \\nscore: ${this.state.score})`);\n  //   this.setState({score: 0});\n  //   return true;\n  // }\n\n  // clickCount = id => {\n  //   this.state.cards.find((o, i) => {\n  //     if (o.id === id) {\n  //       if (cards[i].count === 0) {\n  //         cards[i].count = cards[i].count + 1;\n  //         this.setState({score : this.state.score + 1}, function() {\n  //           console.log(this.state.score);\n  //         });\n  //         this.state.cards.sort(() => Math.random() - 0.5)\n  //         return true;\n  //       } else {\n  //         this.gameOver();\n  //       }\n  //     }\n  //   });\n  // }\n\n  render() {\n    return (\n      <Wrapper>\n          <Navbar \n          score = {this.state.score} highscore = {this.state.highscore}></Navbar>\n          {this.state.cards.map(card => (\n            <Card \n              handleClick={this.handleClick}\n              id ={card.id}\n              key ={card.id}\n              image = {card.image}\n              />\n          ))}\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n\n"]},"metadata":{},"sourceType":"module"}